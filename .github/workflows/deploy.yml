- name: Deploy to EC2
  run: |
    # Setup SSH key
    mkdir -p ~/.ssh
    echo "${{ secrets.EC2_PRIVATE_KEY }}" | base64 -d > ~/.ssh/deploy_key
    chmod 600 ~/.ssh/deploy_key
    
    # Add EC2 to known hosts
    ssh-keyscan 3.101.105.213 >> ~/.ssh/known_hosts
    
    # Deploy to EC2
    echo "Starting deployment..."
    # Pass the secret as an environment variable to the SSH command
    GROQ_API_KEY=${{ secrets.GROQ_API_KEY }} ssh -i ~/.ssh/deploy_key ec2-user@3.101.105.213 << 'EOF'
      set -e # Exit immediately if a command exits with a non-zero status.

      echo "Connected to EC2. Updating code..."
      cd /home/ec2-user # Navigate to a known directory
      
      # Clone or update the repository
      if [ ! -d "decij" ]; then
        git clone https://github.com/ralphramosgit/decij.git decij
      fi
      cd decij
      git fetch origin
      git reset --hard origin/main
      
      # Check Docker
      echo "Checking Docker..."
      docker --version
      
      # Stop and remove existing container if it exists
      if [ $(docker ps -a -q -f name=decij-backend) ]; then
        echo "Stopping and removing existing container..."
        docker stop decij-backend
        docker rm decij-backend
      else
        echo "No existing container found to stop or remove."
      fi
      
      # Build new image
      echo "Building Docker image..."
      docker build -t decij-backend .
      
      # Run new container, using the environment variable passed to SSH
      echo "Starting new container..."
      docker run -d --name decij-backend -p 5000:5000 \
        -e GROQ_API_KEY=$GROQ_API_KEY \
        decij-backend
      
      # Verify deployment
      echo "Verifying deployment..."
      sleep 5
      if docker ps | grep -q decij-backend; then
        echo "✅ Container is running successfully!"
      else
        echo "❌ Container failed to start. Checking logs..."
        docker logs decij-backend
        exit 1
      fi
      
      echo "🎉 Deployment complete!"
    EOF